{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","latest","setLatest","results","setResults","searchCountries","setSearchCountries","useEffect","axios","all","get","then","responseArr","data","catch","err","console","log","lastUpdated","Date","parseInt","updated","toString","countries","filter","item","country","includes","map","i","Card","bg","text","className","style","margin","Img","variant","src","countryInfo","flag","Body","Title","Text","cases","deaths","recovered","todayCases","todayDeaths","active","critical","CardDeck","Footer","Form","Group","controlId","Control","type","placeholder","onChange","e","target","value","queries","columns","query","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e5b6971.chunk.js","sourcesContent":["// import logo from './logo.svg';\n// import './App.css';\nimport React, { useEffect, useState } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from \"axios\";\nimport Columns from \"react-columns\";\nimport Form from \"react-bootstrap/Form\";\n\nfunction App() {\n  const [latest, setLatest] = useState([]);\n  const [results, setResults] = useState([]);\n  const [searchCountries, setSearchCountries] = useState(\"\");\n\n  useEffect(() => {\n    axios\n      .all([\n        axios.get(\"https://disease.sh/v3/covid-19/all?__cf_chl_captcha_tk__=be8b3522b448e0ac88eeecdb0ecbc54798647b51-1624976204-0-AX9LoMudij-7wpZN0qw8N7JEkuXnK8VpJsqEmjP62Sx2lJqGxU_jLj2j3TjVPh3xmK7fENgz6d2Ez5-E4uAIhMEjbvOZuToEQtK8vJJZ1teLnlbSnBlw9wGZrvPvSpLRHHOJp8V-aup_PAV0oMyzhALdi-M43obS3wOC3Bi7t-SDzdnF6vVBoc7Pkdqec6lTrRVUAKTiOc66bBAAtTxZElD271brQ2PHx6CWzUzmoRz_U4uf8B7estgZXjn1njzSpPD9KDY6Y9ep0sCZzcKLTdqPC8QOYimYJHZt-zytxwDaO2NSZcjfxe2HrUGq9ZkGulLlUPA15Yvw3HLX7qXR6ZQ-OFB6Ik2S_VSXaev-5bBDZOVqu2-2BOG_-eYnqHkPFikwHdXF8qVzE4BmdBVptEbvnTTKxZHym-UKxTvvZmsEswYYqJScWlDH5i6bF1PI15z50fJcxd7qU7gnVf_vFqt2RvuwPecpTJocNxAi8y8r_F9BihM-2_QzdhMFuYwqkuGeOQSOv319tVUbz56cqeMN7lbq-8VoGE13MwPVmh8pno5DyDR95_eOIZEKq_NYCm1nIqNfBOiWllFHRpYkjn3qUMJ1i1Bw6T7ihm-KeylGIt6Y041ttClMKjHVHBiDFw\"),\n        axios.get(\"https://disease.sh/v3/covid-19/countries\")\n      ])\n        .then(responseArr =>{\n           setLatest(responseArr[0].data);\n           setResults(responseArr[1].data);\n        })\n        .catch(err => {\n          console.log(err);\n        });\n  }, []);\n\n  const date = new Date(parseInt(latest.updated));\n  const lastUpdated = date.toString();\n\n  const filterCountries = results.filter(item =>{\n    return searchCountries !== \"\" ? item.country.includes(searchCountries) : item;\n  })\n\n  const countries = filterCountries.map((data, i) => {\n    return(\n      <Card\n         key={i}\n         bg=\"light\"\n         text=\"dark\"\n         className=\"text-center\"\n         style={{ margin: \"10px\" }}\n         >\n        <Card.Img variant=\"top\" src={data.countryInfo.flag} />   \n        <Card.Body>\n          <Card.Title>{data.country}</Card.Title>\n          <Card.Text>Cases {data.cases}</Card.Text>\n          <Card.Text>Deaths {data.deaths}</Card.Text>\n          <Card.Text>Recovered {data.recovered}</Card.Text>\n          <Card.Text>Today's cases {data.todayCases}</Card.Text>\n          <Card.Text>Today's deaths {data.todayDeaths}</Card.Text>\n          <Card.Text>Active {data.active}</Card.Text>\n          <Card.Text>Critical {data.critical}</Card.Text>\n        </Card.Body>\n         </Card>\n    );\n  });\n\n var queries = [{\n   columns: 2,\n   query: 'min-width: 500px'\n }, {\n  columns: 3,\n  query: 'min-width: 1000px'\n }];\n\nreturn (\n    <div>\n      <CardDeck>\n  <Card bg=\"secondary\" text=\"white\" className=\"text-center\">\n   \n    <Card.Body>\n      <Card.Title>Cases</Card.Title>\n      <Card.Text>\n       {latest.cases}\n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small>Last updated {lastUpdated}</small>\n    </Card.Footer>\n  </Card>\n  <Card bg=\"danger\" text=\"white\" className=\"text-center\">\n    \n    <Card.Body>\n      <Card.Title>Deaths</Card.Title>\n      <Card.Text>\n      {latest.deaths}\n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small>Last updated {lastUpdated}</small>\n    </Card.Footer>\n  </Card>\n  <Card bg=\"success\" text=\"white\" className=\"text-center\">\n    \n    <Card.Body>\n      <Card.Title>Recovered</Card.Title>\n      <Card.Text>\n      {latest.recovered}\n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small>Last updated {lastUpdated}</small>\n    </Card.Footer>\n  </Card>\n</CardDeck>\n<Form>\n  <Form.Group controlId=\"formGroupSearch\">\n    <Form.Control type=\"text\" placeholder=\"Enter Country\" onChange={e => setSearchCountries(e.target.value)}/>\n  </Form.Group>\n  \n</Form>\n\n<Columns queries={queries}>{countries}</Columns>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}